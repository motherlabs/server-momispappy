// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum ProductImageType {
  MAIN
  DESCRIPTION
}

enum State {
  NORMAL
  DELETE
}

model User {
  id           Int      @id @default(autoincrement())
  uniqueCode   String   @unique
  fcmToken     String?
  name         String   @unique
  phoneNumber  String?
  point        Int      @default(0)
  refreshToken String?
  role         Role     @default(USER)
  state        State    @default(NORMAL)
  createdAt    DateTime @default(now())
  Baby         Baby[]
  Refund       Refund?
}

model Baby {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  gender Gender
  age    Int
  height Int
  weight Int
}

model Refund {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int      @unique
  accountHolder String
  accountNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Setting {
  id      Int     @id @default(autoincrement())
  isPrice Boolean @default(false)
  isPoint Boolean @default(false)
  point   Int     @default(0)
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String
  sort          Int       @default(autoincrement())
  imageLocation String
  Product       Product[]
}

model Brand {
  id            Int       @id @default(autoincrement())
  name          String
  sort          Int       @default(autoincrement())
  imageLocation String
  Product       Product[]
}

model Product {
  id               Int            @id @default(autoincrement())
  category         Category       @relation(fields: [categoryId], references: [id], onUpdate: Cascade)
  categoryId       Int
  brand            Brand          @relation(fields: [brandId], references: [id], onUpdate: Cascade)
  brandId          Int
  crawlingLocation String
  isEvent          Boolean        @default(false)
  name             String
  price            Int
  shippingFee      Int            @default(0)
  discount         Int            @default(0)
  views            Int            @default(0)
  state            State          @default(NORMAL)
  createdAt        DateTime       @default(now())
  ProductImage     ProductImage[]
  toProduct        Relation[]     @relation("toProduct")
  fromProduct      Relation[]     @relation("fromProduct")
}

model ProductImage {
  id        Int              @id @default(autoincrement())
  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  type      ProductImageType
  location  String
}

model Relation {
  toProduct     Product @relation("toProduct", fields: [toProductId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toProductId   Int
  fromProduct   Product @relation("fromProduct", fields: [fromProductId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fromProductId Int

  @@id([toProductId, fromProductId])
}
